{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "maxSupply",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RevealEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "UpdatedURL",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURL",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x580f604aeac5391b43254b979c7cdaaa16501438e9e0adfbd665494c3460b1ee",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3468983",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000040020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000040000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7a6acfcff26c00c01fccc2db491c2499cec86d16df55b40a4557a8619e9ce599",
    "transactionHash": "0x580f604aeac5391b43254b979c7cdaaa16501438e9e0adfbd665494c3460b1ee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x580f604aeac5391b43254b979c7cdaaa16501438e9e0adfbd665494c3460b1ee",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7a6acfcff26c00c01fccc2db491c2499cec86d16df55b40a4557a8619e9ce599"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3468983",
    "status": 1,
    "byzantium": true
  },
  "args": [
    3
  ],
  "numDeployments": 1,
  "solcInputHash": "5d94a687228ef11ddd97944cf28570f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"maxSupply\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevealEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"UpdatedURL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURL\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleERC721.sol\":\"MerkleERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MerkleERC721.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\n\\nimport \\\"./interfaces/IMerkleERC721.sol\\\";\\n\\n\\ncontract MerkleERC721 is IMerkleERC721, ERC721URIStorage, Ownable{\\n\\n    bytes32 internal _merkleRoot; // can be set only with a valid merkle proof\\n    \\n    // --\\n    bool internal _revealEnabled;\\n    uint64 internal _maxSupply;\\n    // -- \\n\\n    mapping (uint256 => bool) internal _tokenRevealed; // Merkle root is already set for the corresponding tokenID\\n\\n    modifier whenRevealEnabled(){\\n        require(_revealEnabled, \\\"Reveal is enabled!\\\");\\n        _;\\n    }\\n\\n    modifier whenRevealDisabled(){\\n        require(!_revealEnabled, \\\"Reveal is disabled!\\\");\\n        _;\\n    }\\n\\n    modifier whenNotAlreadySet(uint256 tokenID){\\n        require(!_tokenRevealed[tokenID], \\\"Merkle root already set!\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenOwner(uint256 tokenID){\\n        require(msg.sender == ownerOf(tokenID), \\\"You are not the token owner!\\\");\\n        _;\\n    }\\n  \\n    constructor(uint64 maxSupply) ERC721(\\\"Random\\\", \\\"RND\\\") Ownable(){\\n        _maxSupply = maxSupply;\\n        _revealEnabled = false;\\n    }\\n\\n    function mintNFT(address to, uint256 tokenID) external onlyOwner{\\n        require(_maxSupply > 0, \\\"Max supply reached\\\");\\n        _mint(to, tokenID);\\n        _maxSupply--;\\n    }\\n\\n    function reveal(uint256 tokenID, string calldata newURL, bytes32[] calldata proof ) external override \\n                                                    onlyTokenOwner(tokenID) whenNotAlreadySet(tokenID) whenRevealEnabled{\\n        bytes32 digest = _calculateHash(tokenID, newURL);\\n        bool isValid = MerkleProof.verify(proof, _merkleRoot, digest);\\n        require(isValid, \\\"Merkle proof is not valid\\\");\\n        \\n        _setTokenURI(tokenID, newURL);\\n        _tokenRevealed[tokenID] = true;\\n\\n        emit UpdatedURL(tokenID, newURL);\\n    }\\n\\n    function setMerkleRoot(bytes32 root) external override onlyOwner whenRevealDisabled{\\n        _merkleRoot = root;\\n\\n        emit MerkleRootUpdated(root);      \\n    }\\n\\n    function enableReveal() external override onlyOwner whenRevealDisabled{\\n        require(_merkleRoot != bytes32(0), \\\"Merkle root not set!\\\");\\n        _revealEnabled = true;\\n        emit RevealEnabled();\\n    }\\n    \\n    function revealEnabled() external view returns(bool){\\n        return _revealEnabled;\\n    }\\n\\n    function getMerkleRoot() external view override returns(bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    function _calculateHash(uint256 tokenID, string memory url) internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this) ,block.chainid, tokenID, url) // add address as param\\n            );\\n    }\\n\\n\\n}\",\"keccak256\":\"0x1e1de33873675f98f05a08a6e4018bb81d0ea18ca264bcc3625f7778256ff35d\",\"license\":\"Unlicense\"},\"contracts/interfaces/IMerkleERC721.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\ninterface IMerkleERC721{\\n\\n    // ------------- Events ------------- //\\n    event MerkleRootUpdated(bytes32 newMerkleRoot);\\n    event UpdatedURL(uint256 tokenID, string url);\\n    event RevealEnabled();\\n\\n\\n    // ------------- Methods ------------- //\\n    function reveal(uint256 tokenID, string memory url, bytes32[] calldata proof) external;\\n\\n    function enableReveal() external;\\n\\n    function setMerkleRoot(bytes32 root) external;\\n\\n    function getMerkleRoot() external view returns(bytes32);\\n\\n\\n\\n}\",\"keccak256\":\"0x28def7967966397434adf1ae3a65680a1358577574ca3d7e1ba3ea54452179f6\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003fe638038062003fe68339818101604052810190620000379190620002d7565b6040518060400160405280600681526020017f52616e646f6d00000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f524e4400000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000210565b508060019080519060200190620000d492919062000210565b505050620000f7620000eb6200014260201b60201c565b6200014a60201b60201c565b80600960016101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600960006101000a81548160ff0219169083151502179055505062000396565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200021e9062000317565b90600052602060002090601f0160209004810192826200024257600085556200028e565b82601f106200025d57805160ff19168380011785556200028e565b828001600101855582156200028e579182015b828111156200028d57825182559160200191906001019062000270565b5b5090506200029d9190620002a1565b5090565b5b80821115620002bc576000816000905550600101620002a2565b5090565b600081519050620002d1816200037c565b92915050565b600060208284031215620002ea57600080fd5b6000620002fa84828501620002c0565b91505092915050565b600067ffffffffffffffff82169050919050565b600060028204905060018216806200033057607f821691505b602082108114156200034757620003466200034d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b620003878162000303565b81146200039357600080fd5b50565b613c4080620003a66000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b85780639ad7a0f61161007c5780639ad7a0f61461033b578063a22cb46514610359578063b88d4fde14610375578063c87b56dd14610391578063e985e9c5146103c1578063f2fde38b146103f157610142565b806370a08231146102a9578063715018a6146102d95780637cb64759146102e35780638da5cb5b146102ff57806395d89b411461031d57610142565b806323b872dd1161010a57806323b872dd146101eb5780633c168eab1461020757806342842e0e14610223578063495906571461023f5780636352211e1461025d5780636ec4e1e71461028d57610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780632219940a146101e1575b600080fd5b610161600480360381019061015c9190612708565b61040d565b60405161016e9190612d86565b60405180910390f35b61017f6104ef565b60405161018c9190612dbc565b60405180910390f35b6101af60048036038101906101aa919061275a565b610581565b6040516101bc9190612d1f565b60405180910390f35b6101df60048036038101906101da91906126a3565b610606565b005b6101e961071e565b005b6102056004803603810190610200919061259d565b61087b565b005b610221600480360381019061021c91906126a3565b6108db565b005b61023d6004803603810190610238919061259d565b610a15565b005b610247610a35565b6040516102549190612da1565b60405180910390f35b6102776004803603810190610272919061275a565b610a3f565b6040516102849190612d1f565b60405180910390f35b6102a760048036038101906102a29190612783565b610af1565b005b6102c360048036038101906102be9190612538565b610dbd565b6040516102d091906130fe565b60405180910390f35b6102e1610e75565b005b6102fd60048036038101906102f891906126df565b610efd565b005b61030761100a565b6040516103149190612d1f565b60405180910390f35b610325611034565b6040516103329190612dbc565b60405180910390f35b6103436110c6565b6040516103509190612d86565b60405180910390f35b610373600480360381019061036e9190612667565b6110dd565b005b61038f600480360381019061038a91906125ec565b6110f3565b005b6103ab60048036038101906103a6919061275a565b611155565b6040516103b89190612dbc565b60405180910390f35b6103db60048036038101906103d69190612561565b6112a7565b6040516103e89190612d86565b60405180910390f35b61040b60048036038101906104069190612538565b61133b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104e857506104e782611433565b5b9050919050565b6060600080546104fe9061339d565b80601f016020809104026020016040519081016040528092919081815260200182805461052a9061339d565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b5050505050905090565b600061058c8261149d565b6105cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c290612fbe565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061061182610a3f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610682576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106799061303e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106a1611509565b73ffffffffffffffffffffffffffffffffffffffff1614806106d057506106cf816106ca611509565b6112a7565b5b61070f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070690612ede565b60405180910390fd5b6107198383611511565b505050565b610726611509565b73ffffffffffffffffffffffffffffffffffffffff1661074461100a565b73ffffffffffffffffffffffffffffffffffffffff161461079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190612fde565b60405180910390fd5b600960009054906101000a900460ff16156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e1906130de565b60405180910390fd5b6000801b6008541415610832576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610829906130be565b60405180910390fd5b6001600960006101000a81548160ff0219169083151502179055507f56db354995358f5ce67b11869241e6fc4c011ed4f9eb057298f3ee3f096ec2b960405160405180910390a1565b61088c610886611509565b826115ca565b6108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c29061305e565b60405180910390fd5b6108d68383836116a8565b505050565b6108e3611509565b73ffffffffffffffffffffffffffffffffffffffff1661090161100a565b73ffffffffffffffffffffffffffffffffffffffff1614610957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094e90612fde565b60405180910390fd5b6000600960019054906101000a900467ffffffffffffffff1667ffffffffffffffff16116109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b19061307e565b60405180910390fd5b6109c4828261190f565b6009600181819054906101000a900467ffffffffffffffff16809291906109ea90613373565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b610a30838383604051806020016040528060008152506110f3565b505050565b6000600854905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf90612f1e565b60405180910390fd5b80915050919050565b84610afb81610a3f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5f90612f5e565b60405180910390fd5b85600a600082815260200190815260200160002060009054906101000a900460ff1615610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc19061301e565b60405180910390fd5b600960009054906101000a900460ff16610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1090612dde565b60405180910390fd5b6000610c698888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ae9565b90506000610cbb868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060085484611b20565b905080610cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf49061309e565b60405180910390fd5b610d4b8989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b37565b6001600a60008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2b76f81be3162289f6f564301b518609813269c15760c47dcd94279db0a8eccd898989604051610daa93929190613119565b60405180910390a1505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2590612efe565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e7d611509565b73ffffffffffffffffffffffffffffffffffffffff16610e9b61100a565b73ffffffffffffffffffffffffffffffffffffffff1614610ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee890612fde565b60405180910390fd5b610efb6000611bab565b565b610f05611509565b73ffffffffffffffffffffffffffffffffffffffff16610f2361100a565b73ffffffffffffffffffffffffffffffffffffffff1614610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7090612fde565b60405180910390fd5b600960009054906101000a900460ff1615610fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc0906130de565b60405180910390fd5b806008819055507f90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea94181604051610fff9190612da1565b60405180910390a150565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546110439061339d565b80601f016020809104026020016040519081016040528092919081815260200182805461106f9061339d565b80156110bc5780601f10611091576101008083540402835291602001916110bc565b820191906000526020600020905b81548152906001019060200180831161109f57829003601f168201915b5050505050905090565b6000600960009054906101000a900460ff16905090565b6110ef6110e8611509565b8383611c71565b5050565b6111046110fe611509565b836115ca565b611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a9061305e565b60405180910390fd5b61114f84848484611dde565b50505050565b60606111608261149d565b61119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119690612f9e565b60405180910390fd5b60006006600084815260200190815260200160002080546111bf9061339d565b80601f01602080910402602001604051908101604052809291908181526020018280546111eb9061339d565b80156112385780601f1061120d57610100808354040283529160200191611238565b820191906000526020600020905b81548152906001019060200180831161121b57829003601f168201915b505050505090506000611249611e3a565b905060008151141561125f5781925050506112a2565b60008251111561129457808260405160200161127c929190612cfb565b604051602081830303815290604052925050506112a2565b61129d84611e51565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611343611509565b73ffffffffffffffffffffffffffffffffffffffff1661136161100a565b73ffffffffffffffffffffffffffffffffffffffff16146113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90612fde565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90612e1e565b60405180910390fd5b61143081611bab565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661158483610a3f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115d58261149d565b611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b90612ebe565b60405180910390fd5b600061161f83610a3f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611661575061166081856112a7565b5b8061169f57508373ffffffffffffffffffffffffffffffffffffffff1661168784610581565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166116c882610a3f565b73ffffffffffffffffffffffffffffffffffffffff161461171e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171590612e3e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561178e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178590612e7e565b60405180910390fd5b611799838383611ef8565b6117a4600082611511565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117f4919061326b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461184b91906131e4565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461190a838383611efd565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561197f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197690612f7e565b60405180910390fd5b6119888161149d565b156119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf90612e5e565b60405180910390fd5b6119d460008383611ef8565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a2491906131e4565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ae560008383611efd565b5050565b600030468484604051602001611b029493929190612cb1565b60405160208183030381529060405280519060200120905092915050565b600082611b2d8584611f02565b1490509392505050565b611b408261149d565b611b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7690612f3e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611ba692919061231b565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd790612e9e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dd19190612d86565b60405180910390a3505050565b611de98484846116a8565b611df584848484611f9d565b611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90612dfe565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e5c8261149d565b611e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9290612ffe565b60405180910390fd5b6000611ea5611e3a565b90506000815111611ec55760405180602001604052806000815250611ef0565b80611ecf84612134565b604051602001611ee0929190612cfb565b6040516020818303038152906040525b915050919050565b505050565b505050565b60008082905060005b8451811015611f92576000858281518110611f4f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050808311611f7157611f6a83826122e1565b9250611f7e565b611f7b81846122e1565b92505b508080611f8a90613400565b915050611f0b565b508091505092915050565b6000611fbe8473ffffffffffffffffffffffffffffffffffffffff166122f8565b15612127578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611fe7611509565b8786866040518563ffffffff1660e01b81526004016120099493929190612d3a565b602060405180830381600087803b15801561202357600080fd5b505af192505050801561205457506040513d601f19601f820116820180604052508101906120519190612731565b60015b6120d7573d8060008114612084576040519150601f19603f3d011682016040523d82523d6000602084013e612089565b606091505b506000815114156120cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c690612dfe565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061212c565b600190505b949350505050565b6060600082141561217c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122dc565b600082905060005b600082146121ae57808061219790613400565b915050600a826121a7919061323a565b9150612184565b60008167ffffffffffffffff8111156121f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122225781602001600182028036833780820191505090505b5090505b600085146122d55760018261223b919061326b565b9150600a8561224a9190613477565b603061225691906131e4565b60f81b818381518110612292577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122ce919061323a565b9450612226565b8093505050505b919050565b600082600052816020526040600020905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546123279061339d565b90600052602060002090601f0160209004810192826123495760008555612390565b82601f1061236257805160ff1916838001178555612390565b82800160010185558215612390579182015b8281111561238f578251825591602001919060010190612374565b5b50905061239d91906123a1565b5090565b5b808211156123ba5760008160009055506001016123a2565b5090565b60006123d16123cc84613170565b61314b565b9050828152602081018484840111156123e957600080fd5b6123f4848285613331565b509392505050565b60008135905061240b81613b97565b92915050565b60008083601f84011261242357600080fd5b8235905067ffffffffffffffff81111561243c57600080fd5b60208301915083602082028301111561245457600080fd5b9250929050565b60008135905061246a81613bae565b92915050565b60008135905061247f81613bc5565b92915050565b60008135905061249481613bdc565b92915050565b6000815190506124a981613bdc565b92915050565b600082601f8301126124c057600080fd5b81356124d08482602086016123be565b91505092915050565b60008083601f8401126124eb57600080fd5b8235905067ffffffffffffffff81111561250457600080fd5b60208301915083600182028301111561251c57600080fd5b9250929050565b60008135905061253281613bf3565b92915050565b60006020828403121561254a57600080fd5b6000612558848285016123fc565b91505092915050565b6000806040838503121561257457600080fd5b6000612582858286016123fc565b9250506020612593858286016123fc565b9150509250929050565b6000806000606084860312156125b257600080fd5b60006125c0868287016123fc565b93505060206125d1868287016123fc565b92505060406125e286828701612523565b9150509250925092565b6000806000806080858703121561260257600080fd5b6000612610878288016123fc565b9450506020612621878288016123fc565b935050604061263287828801612523565b925050606085013567ffffffffffffffff81111561264f57600080fd5b61265b878288016124af565b91505092959194509250565b6000806040838503121561267a57600080fd5b6000612688858286016123fc565b92505060206126998582860161245b565b9150509250929050565b600080604083850312156126b657600080fd5b60006126c4858286016123fc565b92505060206126d585828601612523565b9150509250929050565b6000602082840312156126f157600080fd5b60006126ff84828501612470565b91505092915050565b60006020828403121561271a57600080fd5b600061272884828501612485565b91505092915050565b60006020828403121561274357600080fd5b60006127518482850161249a565b91505092915050565b60006020828403121561276c57600080fd5b600061277a84828501612523565b91505092915050565b60008060008060006060868803121561279b57600080fd5b60006127a988828901612523565b955050602086013567ffffffffffffffff8111156127c657600080fd5b6127d2888289016124d9565b9450945050604086013567ffffffffffffffff8111156127f157600080fd5b6127fd88828901612411565b92509250509295509295909350565b6128158161329f565b82525050565b61282c6128278261329f565b613449565b82525050565b61283b816132b1565b82525050565b61284a816132bd565b82525050565b600061285b826131a1565b61286581856131b7565b9350612875818560208601613340565b61287e81613564565b840191505092915050565b600061289583856131c8565b93506128a2838584613331565b6128ab83613564565b840190509392505050565b60006128c1826131ac565b6128cb81856131c8565b93506128db818560208601613340565b6128e481613564565b840191505092915050565b60006128fa826131ac565b61290481856131d9565b9350612914818560208601613340565b80840191505092915050565b600061292d6012836131c8565b915061293882613582565b602082019050919050565b60006129506032836131c8565b915061295b826135ab565b604082019050919050565b60006129736026836131c8565b915061297e826135fa565b604082019050919050565b60006129966025836131c8565b91506129a182613649565b604082019050919050565b60006129b9601c836131c8565b91506129c482613698565b602082019050919050565b60006129dc6024836131c8565b91506129e7826136c1565b604082019050919050565b60006129ff6019836131c8565b9150612a0a82613710565b602082019050919050565b6000612a22602c836131c8565b9150612a2d82613739565b604082019050919050565b6000612a456038836131c8565b9150612a5082613788565b604082019050919050565b6000612a68602a836131c8565b9150612a73826137d7565b604082019050919050565b6000612a8b6029836131c8565b9150612a9682613826565b604082019050919050565b6000612aae602e836131c8565b9150612ab982613875565b604082019050919050565b6000612ad1601c836131c8565b9150612adc826138c4565b602082019050919050565b6000612af46020836131c8565b9150612aff826138ed565b602082019050919050565b6000612b176031836131c8565b9150612b2282613916565b604082019050919050565b6000612b3a602c836131c8565b9150612b4582613965565b604082019050919050565b6000612b5d6020836131c8565b9150612b68826139b4565b602082019050919050565b6000612b80602f836131c8565b9150612b8b826139dd565b604082019050919050565b6000612ba36018836131c8565b9150612bae82613a2c565b602082019050919050565b6000612bc66021836131c8565b9150612bd182613a55565b604082019050919050565b6000612be96031836131c8565b9150612bf482613aa4565b604082019050919050565b6000612c0c6012836131c8565b9150612c1782613af3565b602082019050919050565b6000612c2f6019836131c8565b9150612c3a82613b1c565b602082019050919050565b6000612c526014836131c8565b9150612c5d82613b45565b602082019050919050565b6000612c756013836131c8565b9150612c8082613b6e565b602082019050919050565b612c9481613313565b82525050565b612cab612ca682613313565b61346d565b82525050565b6000612cbd828761281b565b601482019150612ccd8286612c9a565b602082019150612cdd8285612c9a565b602082019150612ced82846128ef565b915081905095945050505050565b6000612d0782856128ef565b9150612d1382846128ef565b91508190509392505050565b6000602082019050612d34600083018461280c565b92915050565b6000608082019050612d4f600083018761280c565b612d5c602083018661280c565b612d696040830185612c8b565b8181036060830152612d7b8184612850565b905095945050505050565b6000602082019050612d9b6000830184612832565b92915050565b6000602082019050612db66000830184612841565b92915050565b60006020820190508181036000830152612dd681846128b6565b905092915050565b60006020820190508181036000830152612df781612920565b9050919050565b60006020820190508181036000830152612e1781612943565b9050919050565b60006020820190508181036000830152612e3781612966565b9050919050565b60006020820190508181036000830152612e5781612989565b9050919050565b60006020820190508181036000830152612e77816129ac565b9050919050565b60006020820190508181036000830152612e97816129cf565b9050919050565b60006020820190508181036000830152612eb7816129f2565b9050919050565b60006020820190508181036000830152612ed781612a15565b9050919050565b60006020820190508181036000830152612ef781612a38565b9050919050565b60006020820190508181036000830152612f1781612a5b565b9050919050565b60006020820190508181036000830152612f3781612a7e565b9050919050565b60006020820190508181036000830152612f5781612aa1565b9050919050565b60006020820190508181036000830152612f7781612ac4565b9050919050565b60006020820190508181036000830152612f9781612ae7565b9050919050565b60006020820190508181036000830152612fb781612b0a565b9050919050565b60006020820190508181036000830152612fd781612b2d565b9050919050565b60006020820190508181036000830152612ff781612b50565b9050919050565b6000602082019050818103600083015261301781612b73565b9050919050565b6000602082019050818103600083015261303781612b96565b9050919050565b6000602082019050818103600083015261305781612bb9565b9050919050565b6000602082019050818103600083015261307781612bdc565b9050919050565b6000602082019050818103600083015261309781612bff565b9050919050565b600060208201905081810360008301526130b781612c22565b9050919050565b600060208201905081810360008301526130d781612c45565b9050919050565b600060208201905081810360008301526130f781612c68565b9050919050565b60006020820190506131136000830184612c8b565b92915050565b600060408201905061312e6000830186612c8b565b8181036020830152613141818486612889565b9050949350505050565b6000613155613166565b905061316182826133cf565b919050565b6000604051905090565b600067ffffffffffffffff82111561318b5761318a613535565b5b61319482613564565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006131ef82613313565b91506131fa83613313565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561322f5761322e6134a8565b5b828201905092915050565b600061324582613313565b915061325083613313565b9250826132605761325f6134d7565b5b828204905092915050565b600061327682613313565b915061328183613313565b925082821015613294576132936134a8565b5b828203905092915050565b60006132aa826132f3565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561335e578082015181840152602081019050613343565b8381111561336d576000848401525b50505050565b600061337e8261331d565b91506000821415613392576133916134a8565b5b600182039050919050565b600060028204905060018216806133b557607f821691505b602082108114156133c9576133c8613506565b5b50919050565b6133d882613564565b810181811067ffffffffffffffff821117156133f7576133f6613535565b5b80604052505050565b600061340b82613313565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561343e5761343d6134a8565b5b600182019050919050565b60006134548261345b565b9050919050565b600061346682613575565b9050919050565b6000819050919050565b600061348282613313565b915061348d83613313565b92508261349d5761349c6134d7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f52657665616c20697320656e61626c6564210000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f596f7520617265206e6f742074686520746f6b656e206f776e65722100000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4d65726b6c6520726f6f7420616c726561647920736574210000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4d617820737570706c7920726561636865640000000000000000000000000000600082015250565b7f4d65726b6c652070726f6f66206973206e6f742076616c696400000000000000600082015250565b7f4d65726b6c6520726f6f74206e6f742073657421000000000000000000000000600082015250565b7f52657665616c2069732064697361626c65642100000000000000000000000000600082015250565b613ba08161329f565b8114613bab57600080fd5b50565b613bb7816132b1565b8114613bc257600080fd5b50565b613bce816132bd565b8114613bd957600080fd5b50565b613be5816132c7565b8114613bf057600080fd5b50565b613bfc81613313565b8114613c0757600080fd5b5056fea264697066735822122094c429cd42f41335e5646f8d9e9d1870ef511fc0b056202a8ac170dd2bec9a9764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b85780639ad7a0f61161007c5780639ad7a0f61461033b578063a22cb46514610359578063b88d4fde14610375578063c87b56dd14610391578063e985e9c5146103c1578063f2fde38b146103f157610142565b806370a08231146102a9578063715018a6146102d95780637cb64759146102e35780638da5cb5b146102ff57806395d89b411461031d57610142565b806323b872dd1161010a57806323b872dd146101eb5780633c168eab1461020757806342842e0e14610223578063495906571461023f5780636352211e1461025d5780636ec4e1e71461028d57610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780632219940a146101e1575b600080fd5b610161600480360381019061015c9190612708565b61040d565b60405161016e9190612d86565b60405180910390f35b61017f6104ef565b60405161018c9190612dbc565b60405180910390f35b6101af60048036038101906101aa919061275a565b610581565b6040516101bc9190612d1f565b60405180910390f35b6101df60048036038101906101da91906126a3565b610606565b005b6101e961071e565b005b6102056004803603810190610200919061259d565b61087b565b005b610221600480360381019061021c91906126a3565b6108db565b005b61023d6004803603810190610238919061259d565b610a15565b005b610247610a35565b6040516102549190612da1565b60405180910390f35b6102776004803603810190610272919061275a565b610a3f565b6040516102849190612d1f565b60405180910390f35b6102a760048036038101906102a29190612783565b610af1565b005b6102c360048036038101906102be9190612538565b610dbd565b6040516102d091906130fe565b60405180910390f35b6102e1610e75565b005b6102fd60048036038101906102f891906126df565b610efd565b005b61030761100a565b6040516103149190612d1f565b60405180910390f35b610325611034565b6040516103329190612dbc565b60405180910390f35b6103436110c6565b6040516103509190612d86565b60405180910390f35b610373600480360381019061036e9190612667565b6110dd565b005b61038f600480360381019061038a91906125ec565b6110f3565b005b6103ab60048036038101906103a6919061275a565b611155565b6040516103b89190612dbc565b60405180910390f35b6103db60048036038101906103d69190612561565b6112a7565b6040516103e89190612d86565b60405180910390f35b61040b60048036038101906104069190612538565b61133b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104e857506104e782611433565b5b9050919050565b6060600080546104fe9061339d565b80601f016020809104026020016040519081016040528092919081815260200182805461052a9061339d565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b5050505050905090565b600061058c8261149d565b6105cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c290612fbe565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061061182610a3f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610682576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106799061303e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106a1611509565b73ffffffffffffffffffffffffffffffffffffffff1614806106d057506106cf816106ca611509565b6112a7565b5b61070f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070690612ede565b60405180910390fd5b6107198383611511565b505050565b610726611509565b73ffffffffffffffffffffffffffffffffffffffff1661074461100a565b73ffffffffffffffffffffffffffffffffffffffff161461079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190612fde565b60405180910390fd5b600960009054906101000a900460ff16156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e1906130de565b60405180910390fd5b6000801b6008541415610832576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610829906130be565b60405180910390fd5b6001600960006101000a81548160ff0219169083151502179055507f56db354995358f5ce67b11869241e6fc4c011ed4f9eb057298f3ee3f096ec2b960405160405180910390a1565b61088c610886611509565b826115ca565b6108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c29061305e565b60405180910390fd5b6108d68383836116a8565b505050565b6108e3611509565b73ffffffffffffffffffffffffffffffffffffffff1661090161100a565b73ffffffffffffffffffffffffffffffffffffffff1614610957576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094e90612fde565b60405180910390fd5b6000600960019054906101000a900467ffffffffffffffff1667ffffffffffffffff16116109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b19061307e565b60405180910390fd5b6109c4828261190f565b6009600181819054906101000a900467ffffffffffffffff16809291906109ea90613373565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b610a30838383604051806020016040528060008152506110f3565b505050565b6000600854905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf90612f1e565b60405180910390fd5b80915050919050565b84610afb81610a3f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5f90612f5e565b60405180910390fd5b85600a600082815260200190815260200160002060009054906101000a900460ff1615610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc19061301e565b60405180910390fd5b600960009054906101000a900460ff16610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1090612dde565b60405180910390fd5b6000610c698888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ae9565b90506000610cbb868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060085484611b20565b905080610cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf49061309e565b60405180910390fd5b610d4b8989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b37565b6001600a60008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2b76f81be3162289f6f564301b518609813269c15760c47dcd94279db0a8eccd898989604051610daa93929190613119565b60405180910390a1505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2590612efe565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e7d611509565b73ffffffffffffffffffffffffffffffffffffffff16610e9b61100a565b73ffffffffffffffffffffffffffffffffffffffff1614610ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee890612fde565b60405180910390fd5b610efb6000611bab565b565b610f05611509565b73ffffffffffffffffffffffffffffffffffffffff16610f2361100a565b73ffffffffffffffffffffffffffffffffffffffff1614610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7090612fde565b60405180910390fd5b600960009054906101000a900460ff1615610fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc0906130de565b60405180910390fd5b806008819055507f90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea94181604051610fff9190612da1565b60405180910390a150565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546110439061339d565b80601f016020809104026020016040519081016040528092919081815260200182805461106f9061339d565b80156110bc5780601f10611091576101008083540402835291602001916110bc565b820191906000526020600020905b81548152906001019060200180831161109f57829003601f168201915b5050505050905090565b6000600960009054906101000a900460ff16905090565b6110ef6110e8611509565b8383611c71565b5050565b6111046110fe611509565b836115ca565b611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a9061305e565b60405180910390fd5b61114f84848484611dde565b50505050565b60606111608261149d565b61119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119690612f9e565b60405180910390fd5b60006006600084815260200190815260200160002080546111bf9061339d565b80601f01602080910402602001604051908101604052809291908181526020018280546111eb9061339d565b80156112385780601f1061120d57610100808354040283529160200191611238565b820191906000526020600020905b81548152906001019060200180831161121b57829003601f168201915b505050505090506000611249611e3a565b905060008151141561125f5781925050506112a2565b60008251111561129457808260405160200161127c929190612cfb565b604051602081830303815290604052925050506112a2565b61129d84611e51565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611343611509565b73ffffffffffffffffffffffffffffffffffffffff1661136161100a565b73ffffffffffffffffffffffffffffffffffffffff16146113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90612fde565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90612e1e565b60405180910390fd5b61143081611bab565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661158483610a3f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115d58261149d565b611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b90612ebe565b60405180910390fd5b600061161f83610a3f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611661575061166081856112a7565b5b8061169f57508373ffffffffffffffffffffffffffffffffffffffff1661168784610581565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166116c882610a3f565b73ffffffffffffffffffffffffffffffffffffffff161461171e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171590612e3e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561178e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178590612e7e565b60405180910390fd5b611799838383611ef8565b6117a4600082611511565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117f4919061326b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461184b91906131e4565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461190a838383611efd565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561197f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197690612f7e565b60405180910390fd5b6119888161149d565b156119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf90612e5e565b60405180910390fd5b6119d460008383611ef8565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a2491906131e4565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ae560008383611efd565b5050565b600030468484604051602001611b029493929190612cb1565b60405160208183030381529060405280519060200120905092915050565b600082611b2d8584611f02565b1490509392505050565b611b408261149d565b611b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7690612f3e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611ba692919061231b565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd790612e9e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dd19190612d86565b60405180910390a3505050565b611de98484846116a8565b611df584848484611f9d565b611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90612dfe565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e5c8261149d565b611e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9290612ffe565b60405180910390fd5b6000611ea5611e3a565b90506000815111611ec55760405180602001604052806000815250611ef0565b80611ecf84612134565b604051602001611ee0929190612cfb565b6040516020818303038152906040525b915050919050565b505050565b505050565b60008082905060005b8451811015611f92576000858281518110611f4f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050808311611f7157611f6a83826122e1565b9250611f7e565b611f7b81846122e1565b92505b508080611f8a90613400565b915050611f0b565b508091505092915050565b6000611fbe8473ffffffffffffffffffffffffffffffffffffffff166122f8565b15612127578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611fe7611509565b8786866040518563ffffffff1660e01b81526004016120099493929190612d3a565b602060405180830381600087803b15801561202357600080fd5b505af192505050801561205457506040513d601f19601f820116820180604052508101906120519190612731565b60015b6120d7573d8060008114612084576040519150601f19603f3d011682016040523d82523d6000602084013e612089565b606091505b506000815114156120cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c690612dfe565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061212c565b600190505b949350505050565b6060600082141561217c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122dc565b600082905060005b600082146121ae57808061219790613400565b915050600a826121a7919061323a565b9150612184565b60008167ffffffffffffffff8111156121f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122225781602001600182028036833780820191505090505b5090505b600085146122d55760018261223b919061326b565b9150600a8561224a9190613477565b603061225691906131e4565b60f81b818381518110612292577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122ce919061323a565b9450612226565b8093505050505b919050565b600082600052816020526040600020905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546123279061339d565b90600052602060002090601f0160209004810192826123495760008555612390565b82601f1061236257805160ff1916838001178555612390565b82800160010185558215612390579182015b8281111561238f578251825591602001919060010190612374565b5b50905061239d91906123a1565b5090565b5b808211156123ba5760008160009055506001016123a2565b5090565b60006123d16123cc84613170565b61314b565b9050828152602081018484840111156123e957600080fd5b6123f4848285613331565b509392505050565b60008135905061240b81613b97565b92915050565b60008083601f84011261242357600080fd5b8235905067ffffffffffffffff81111561243c57600080fd5b60208301915083602082028301111561245457600080fd5b9250929050565b60008135905061246a81613bae565b92915050565b60008135905061247f81613bc5565b92915050565b60008135905061249481613bdc565b92915050565b6000815190506124a981613bdc565b92915050565b600082601f8301126124c057600080fd5b81356124d08482602086016123be565b91505092915050565b60008083601f8401126124eb57600080fd5b8235905067ffffffffffffffff81111561250457600080fd5b60208301915083600182028301111561251c57600080fd5b9250929050565b60008135905061253281613bf3565b92915050565b60006020828403121561254a57600080fd5b6000612558848285016123fc565b91505092915050565b6000806040838503121561257457600080fd5b6000612582858286016123fc565b9250506020612593858286016123fc565b9150509250929050565b6000806000606084860312156125b257600080fd5b60006125c0868287016123fc565b93505060206125d1868287016123fc565b92505060406125e286828701612523565b9150509250925092565b6000806000806080858703121561260257600080fd5b6000612610878288016123fc565b9450506020612621878288016123fc565b935050604061263287828801612523565b925050606085013567ffffffffffffffff81111561264f57600080fd5b61265b878288016124af565b91505092959194509250565b6000806040838503121561267a57600080fd5b6000612688858286016123fc565b92505060206126998582860161245b565b9150509250929050565b600080604083850312156126b657600080fd5b60006126c4858286016123fc565b92505060206126d585828601612523565b9150509250929050565b6000602082840312156126f157600080fd5b60006126ff84828501612470565b91505092915050565b60006020828403121561271a57600080fd5b600061272884828501612485565b91505092915050565b60006020828403121561274357600080fd5b60006127518482850161249a565b91505092915050565b60006020828403121561276c57600080fd5b600061277a84828501612523565b91505092915050565b60008060008060006060868803121561279b57600080fd5b60006127a988828901612523565b955050602086013567ffffffffffffffff8111156127c657600080fd5b6127d2888289016124d9565b9450945050604086013567ffffffffffffffff8111156127f157600080fd5b6127fd88828901612411565b92509250509295509295909350565b6128158161329f565b82525050565b61282c6128278261329f565b613449565b82525050565b61283b816132b1565b82525050565b61284a816132bd565b82525050565b600061285b826131a1565b61286581856131b7565b9350612875818560208601613340565b61287e81613564565b840191505092915050565b600061289583856131c8565b93506128a2838584613331565b6128ab83613564565b840190509392505050565b60006128c1826131ac565b6128cb81856131c8565b93506128db818560208601613340565b6128e481613564565b840191505092915050565b60006128fa826131ac565b61290481856131d9565b9350612914818560208601613340565b80840191505092915050565b600061292d6012836131c8565b915061293882613582565b602082019050919050565b60006129506032836131c8565b915061295b826135ab565b604082019050919050565b60006129736026836131c8565b915061297e826135fa565b604082019050919050565b60006129966025836131c8565b91506129a182613649565b604082019050919050565b60006129b9601c836131c8565b91506129c482613698565b602082019050919050565b60006129dc6024836131c8565b91506129e7826136c1565b604082019050919050565b60006129ff6019836131c8565b9150612a0a82613710565b602082019050919050565b6000612a22602c836131c8565b9150612a2d82613739565b604082019050919050565b6000612a456038836131c8565b9150612a5082613788565b604082019050919050565b6000612a68602a836131c8565b9150612a73826137d7565b604082019050919050565b6000612a8b6029836131c8565b9150612a9682613826565b604082019050919050565b6000612aae602e836131c8565b9150612ab982613875565b604082019050919050565b6000612ad1601c836131c8565b9150612adc826138c4565b602082019050919050565b6000612af46020836131c8565b9150612aff826138ed565b602082019050919050565b6000612b176031836131c8565b9150612b2282613916565b604082019050919050565b6000612b3a602c836131c8565b9150612b4582613965565b604082019050919050565b6000612b5d6020836131c8565b9150612b68826139b4565b602082019050919050565b6000612b80602f836131c8565b9150612b8b826139dd565b604082019050919050565b6000612ba36018836131c8565b9150612bae82613a2c565b602082019050919050565b6000612bc66021836131c8565b9150612bd182613a55565b604082019050919050565b6000612be96031836131c8565b9150612bf482613aa4565b604082019050919050565b6000612c0c6012836131c8565b9150612c1782613af3565b602082019050919050565b6000612c2f6019836131c8565b9150612c3a82613b1c565b602082019050919050565b6000612c526014836131c8565b9150612c5d82613b45565b602082019050919050565b6000612c756013836131c8565b9150612c8082613b6e565b602082019050919050565b612c9481613313565b82525050565b612cab612ca682613313565b61346d565b82525050565b6000612cbd828761281b565b601482019150612ccd8286612c9a565b602082019150612cdd8285612c9a565b602082019150612ced82846128ef565b915081905095945050505050565b6000612d0782856128ef565b9150612d1382846128ef565b91508190509392505050565b6000602082019050612d34600083018461280c565b92915050565b6000608082019050612d4f600083018761280c565b612d5c602083018661280c565b612d696040830185612c8b565b8181036060830152612d7b8184612850565b905095945050505050565b6000602082019050612d9b6000830184612832565b92915050565b6000602082019050612db66000830184612841565b92915050565b60006020820190508181036000830152612dd681846128b6565b905092915050565b60006020820190508181036000830152612df781612920565b9050919050565b60006020820190508181036000830152612e1781612943565b9050919050565b60006020820190508181036000830152612e3781612966565b9050919050565b60006020820190508181036000830152612e5781612989565b9050919050565b60006020820190508181036000830152612e77816129ac565b9050919050565b60006020820190508181036000830152612e97816129cf565b9050919050565b60006020820190508181036000830152612eb7816129f2565b9050919050565b60006020820190508181036000830152612ed781612a15565b9050919050565b60006020820190508181036000830152612ef781612a38565b9050919050565b60006020820190508181036000830152612f1781612a5b565b9050919050565b60006020820190508181036000830152612f3781612a7e565b9050919050565b60006020820190508181036000830152612f5781612aa1565b9050919050565b60006020820190508181036000830152612f7781612ac4565b9050919050565b60006020820190508181036000830152612f9781612ae7565b9050919050565b60006020820190508181036000830152612fb781612b0a565b9050919050565b60006020820190508181036000830152612fd781612b2d565b9050919050565b60006020820190508181036000830152612ff781612b50565b9050919050565b6000602082019050818103600083015261301781612b73565b9050919050565b6000602082019050818103600083015261303781612b96565b9050919050565b6000602082019050818103600083015261305781612bb9565b9050919050565b6000602082019050818103600083015261307781612bdc565b9050919050565b6000602082019050818103600083015261309781612bff565b9050919050565b600060208201905081810360008301526130b781612c22565b9050919050565b600060208201905081810360008301526130d781612c45565b9050919050565b600060208201905081810360008301526130f781612c68565b9050919050565b60006020820190506131136000830184612c8b565b92915050565b600060408201905061312e6000830186612c8b565b8181036020830152613141818486612889565b9050949350505050565b6000613155613166565b905061316182826133cf565b919050565b6000604051905090565b600067ffffffffffffffff82111561318b5761318a613535565b5b61319482613564565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006131ef82613313565b91506131fa83613313565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561322f5761322e6134a8565b5b828201905092915050565b600061324582613313565b915061325083613313565b9250826132605761325f6134d7565b5b828204905092915050565b600061327682613313565b915061328183613313565b925082821015613294576132936134a8565b5b828203905092915050565b60006132aa826132f3565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561335e578082015181840152602081019050613343565b8381111561336d576000848401525b50505050565b600061337e8261331d565b91506000821415613392576133916134a8565b5b600182039050919050565b600060028204905060018216806133b557607f821691505b602082108114156133c9576133c8613506565b5b50919050565b6133d882613564565b810181811067ffffffffffffffff821117156133f7576133f6613535565b5b80604052505050565b600061340b82613313565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561343e5761343d6134a8565b5b600182019050919050565b60006134548261345b565b9050919050565b600061346682613575565b9050919050565b6000819050919050565b600061348282613313565b915061348d83613313565b92508261349d5761349c6134d7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f52657665616c20697320656e61626c6564210000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f596f7520617265206e6f742074686520746f6b656e206f776e65722100000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4d65726b6c6520726f6f7420616c726561647920736574210000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4d617820737570706c7920726561636865640000000000000000000000000000600082015250565b7f4d65726b6c652070726f6f66206973206e6f742076616c696400000000000000600082015250565b7f4d65726b6c6520726f6f74206e6f742073657421000000000000000000000000600082015250565b7f52657665616c2069732064697361626c65642100000000000000000000000000600082015250565b613ba08161329f565b8114613bab57600080fd5b50565b613bb7816132b1565b8114613bc257600080fd5b50565b613bce816132bd565b8114613bd957600080fd5b50565b613be5816132c7565b8114613bf057600080fd5b50565b613bfc81613313565b8114613c0757600080fd5b5056fea264697066735822122094c429cd42f41335e5646f8d9e9d1870ef511fc0b056202a8ac170dd2bec9a9764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1117,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1922,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_merkleRoot",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 1924,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_revealEnabled",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 1926,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_maxSupply",
        "offset": 1,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 1930,
        "contract": "contracts/MerkleERC721.sol:MerkleERC721",
        "label": "_tokenRevealed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}